///////////////Day of the Programmer///////////////////////////


#include <iostream>
#include <string>
#include <sstream>
using namespace std;

string intToString(int number)
{
    stringstream ss;
    ss << number;
    return ss.str();
}
string dayOfProgrammer(int y)
{
    int j=6;
    int i;
    string name="19.02.1965";
    string date=intToString(y);
    if((y%4==0 &&y%100!=0) || (y%400==0 && y%100==0))
    {
        name[0]='1';
        name[1]='2';
        name[2]='.';
        name[3]='0';
        name[4]='9';
        name[5]='.';
        for(i=0; i<date.length(); i++)
        {

            name[j]=date[i];
            j++;
        }
    }
    else
    {
        name[0]='1';
        name[1]='3';
        name[2]='.';
        name[3]='0';
        name[4]='9';
        name[5]='.';
        for(i=0; i<date.length(); i++)
        {

            name[j]=date[i];
            j++;
        }
    }
    return name;

}
int main()
{
    int y;
    cin>>y;
    cout<<dayOfProgrammer(y)<<endl;


}
/////////////////Breaking the records/////////////////////////////
#include <iostream>
#include <string>
#include <sstream>
using namespace std;
void breakingRecords(int n,int scores[]){
    int T[1],num1=0,num2=0,c=0,h=0;
int s[10];
int max1=scores[0];
for(int i=1;i<n;i++){
    if(max1<scores[i]){
        num1++;
        max1=scores[i];

    }
}
int min1=scores[0];
for(int i=1;i<n;i++){
    if(min1>scores[i]){
            s[c]=scores[i];
    c++;
        num2++;
    }


}
for(int i=0;i<c;i++){
    for(int j=0;j<c;j++){
       if(i!=j){
            if(s[i]==s[j]){
                h++;
            }
       }

    }



}
if(h!=0){
num2=num2-(h/2);
}


T[0]=num1;
T[1]=num2;
for(int i=0;i<2;i++){
    cout<<T[i]<<endl;
}


}


int main()
{
    int n=10;
    int scores[]={3,4,21,36,10,28,35,5,24,42};
breakingRecords(n,scores);


}
//////////////Apple and Orange//////////////////////////////////
#include <iostream>
#include <string>
#include <sstream>
using namespace std;
void countApplesAndOranges(int s,int t,int a,int b,int apples[],int oranges[],int m,int n){
 int i,num1=0,num2=0;
 for(i=0;i<m;i++){
    apples[i]= apples[i]+a;


 }
 for(i=0;i<n;i++){

    oranges[i]=oranges[i]+b;

 }


for(i=0;i<m;i++){
    if(s<=apples[i] && apples[i]<=t){
        num1++;
    }



}
for(i=0;i<n;i++){
    if(s<=oranges[i]&& oranges[i]<=t){
        num2++;
    }
}
cout<<num1<<endl;
cout<<num2<<endl;







}


int main()
{
    int s=7,t=10,a=5,b=15,m=3,n=2;
    int apples[]={-2,2,1};
    int oranges[]={5,-6};
    countApplesAndOranges(s,t,a,b,apples,oranges,m,n);



}
/////////////////////////////////
string encryption(string s) {
    string s1;
    int i, j, p = 0;

    s.erase(remove(s.begin(), s.end(), ' '), s.end());
    double racineTaille = sqrt(static_cast<double>(s.size()));

    int entierInf = static_cast<int>(floor(racineTaille));
    int entierSup = static_cast<int>(ceil(racineTaille));
    if((entierInf*entierSup)<s.size()){
       entierInf=entierSup;


       }
    vector<vector<char>> matrice(entierInf, vector<char>(entierSup));
    int k = 0;

    for (i = 0; i < entierInf; i++) {
        for (j = 0; j < entierSup; j++) {
            matrice[i][j] = s[k];
            k++;
        }
    }
for (i = 0; i < entierSup; i++) {
        for (j = 0; j < entierInf; j++) {
            if (matrice[j][i] != '\0') {
                s1.push_back(matrice[j][i]);
            }
        }
      
            s1.push_back(' ');
  
    }

    return s1;
}
    